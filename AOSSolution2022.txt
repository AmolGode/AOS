Q1

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include<sys/wait.h>
// #include<fcntl.h>
int main()
{
    pid_t pid;
    int fd[2];
    char *args[] = {"", NULL};
    int cnum,pnum;
    
    if(pipe(fd) == -1)//fd[0] for read fd[1] for write
    {
        perror("pipe");
        exit(1);
    }
    pid = fork();
    if (pid < 0)
    {
        perror("fork");
        exit(1);
    }
    
    if(pid == 0)
    {
        close(fd[0]);
        printf("\n**In the child process**\n");
        printf("Enter 1 for wc and 2 for ls : ");
        scanf("%d",&cnum);
        write(fd[1],&cnum,sizeof(int));
        close(fd[1]);

    }
    else
    {
        wait(NULL);
        close(fd[1]);
        printf("\n**In the parent precess**\n");
        read(fd[0],&pnum,sizeof(int));
        close(fd[0]);
        printf("Number recieved from child = %d\n",pnum);
        printf("In Parent process PID = %d\n", getpid());

        
        if(pnum == 1)
        {
            printf("\nCalling execv for wc.c ...\n\n\n");
            execv("./wc", args);
        }else
        {
            printf("\nCalling execv for ls.c ...\n\n\n");
            execv("./ls", args);
        }
        
        printf("Error");
    }
}

**ls.c

#include<stdio.h>
#include<unistd.h>
int main(int argc,char *argv[])
{
    execlp("ls","ls","-l",NULL);
}

**wc.c
#include<stdio.h>
#include<unistd.h>
int main(int argc,char *argv[])
{
    execlp("wc","wc","q11.c",NULL);
}



OUTPUT

(base) amol@amol-Ideapad-320:~/AOS$ ./q11

**In the child process**
Enter 1 for wc and 2 for ls : 1

**In the parent precess**
Number recieved from child = 1
In Parent process PID = 30729

Calling execv for wc.c ...


  57  116 1221 q11.c

  ************************************
(base) amol@amol-Ideapad-320:~/AOS$ ./q11

**In the child process**
Enter 1 for wc and 2 for ls : 2

**In the parent precess**
Number recieved from child = 2
In Parent process PID = 30764

Calling execv for ls.c ...


total 252
drwxrwxr-x 2 amol amol  4096 May 28 16:19 adir
-rw-rw-r-- 1 amol amol 12582 May 29 18:01 AOSSolution2022.txt
-rwxrwxr-x 1 amol amol 17008 May 29 18:16 a.out
drwxrwxr-x 3 amol amol  4096 May 28 17:34 kdir
-rwxrwxr-x 1 amol amol 16696 May 29 18:56 ls

----------------------------------------------------------------
Q2

#include<stdio.h>
#include<unistd.h>
#include<dirent.h>
#include<string.h>
// #include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
int copy_content();
int main()
{
    int fd;
    fd = copy_content();
    printf("\nNew file file descriptior is = %d\n",fd);
}
int copy_content()
{
    DIR *dir;
    struct dirent *dirent;
    char *ext = ".txt";
    int i,j,len,fdNew,fd,flag;
    char *ch;


    fdNew = open("newFile.text",O_CREAT|O_WRONLY,0642);
    dir = opendir(".");
    while((dirent = readdir(dir)) != NULL)
    {
        len = strlen(dirent->d_name);
        flag = 1;
        for(i = len-4, j = 0;i < len , j < 4; i++, j++)
        {
            if(dirent->d_name[i] != ext[j])
            {
                flag = 0;
                break;
            }
        }
        if(flag)
        {
            printf("%s matched \n",dirent->d_name);
            fd = open(dirent->d_name,O_RDONLY);
            while(read(fd,&ch,1))
            {
                write(fdNew,&ch,1);
            }
        }
    }

    return fdNew;
}

OUTPUT
(base) amol@amol-Ideapad-320:~/AOS$ ./a.out
output.txt matched 
AOSSolution2022.txt matched 
q77.txt matched 
temp.txt matched 
temp2.txt matched 

New file file descriptior is = 3
---------------------------------------------------------------------------------------------------------

#include<stdio.h>
#include<unistd.h>
#include<string.h>
#include<sys/stat.h>


int main(int argc, char *argv[])
{
    int i,j;
    long size1,size2;
    struct stat st1,st2;
    char temp_filename[100];
    int size = argc-1;
    char files[size][100];

    if(argc < 1)
    {
        printf("Insufficient number of argumanet..!");
    }

    for(i = 0 ; i < size ; i++)
    {
        strcpy(files[i],argv[i+1]);
    }
    for(i = 0 ; i < argc-1; i++)
    {
        stat(files[i],&st1);
        printf("File name = %s  ||  Size = %ld \n",files[i],st1.st_size);
    }

    printf("\n******In sordet order****** \n\n");

    for(i = 0 ; i < size -1; i++)
    {
        for(j = 0; j < size - i - 1; j++)
        {
            stat(files[j],&st1);
            stat(files[j+1],&st2);

            size1 = st1.st_size;
            size2 = st2.st_size;
            if(size1 > size2)
            {
                strcpy(temp_filename,files[j]);
                strcpy(files[j],files[j+1]);
                strcpy(files[j+1],temp_filename);
            }
        }
    }

    for(i = 0 ; i < size; i++)
    {
        stat(files[i],&st1);
        printf("File name = %s  ||  Size = %ld \n",files[i],st1.st_size);
    }
}


output
(base) amol@amol-Ideapad-320:~/AOS$ gcc q3.c
(base) amol@amol-Ideapad-320:~/AOS$ ./a.out q1.c temp.txt q2.txt
File name = q1.c  ||  Size = 576 
File name = temp.txt  ||  Size = 43 
File name = q2.txt  ||  Size = 43 

******In sordet order****** 

File name = temp.txt  ||  Size = 43 
File name = q2.txt  ||  Size = 43 
File name = q1.c  ||  Size = 576 

--------------------------------------------------------
Q4 

#include<stdio.h>
#include<unistd.h>
#include<dirent.h>
#include<stdlib.h>

int main()
{
    struct dirent **dirent_list;
    int num_of_dir,i=0;

    num_of_dir = scandir(".",&dirent_list,0,alphasort);
    if(num_of_dir < 0)
    {
        perror("scandir");
    }else
    {
        while(i < num_of_dir)
        {
            if(dirent_list[i]->d_type == 4)
            {
                printf("Directory Name = %s\n",dirent_list[i]->d_name);
            }
            i++;
        }
    }
    free(dirent_list);
}


output

(base) amol@amol-Ideapad-320:~/AOS$ gcc q4.c
(base) amol@amol-Ideapad-320:~/AOS$ ./a.out
Directory Name = .
Directory Name = ..
Directory Name = .vscode
Directory Name = adir
Directory Name = kdir
Directory Name = mdir
Directory Name = zdir


------------------------------------------------------------------------------------
Q5

#include<stdio.h>
#include<unistd.h>
#include<sys/stat.h>
#include<dirent.h>
#include<stdlib.h> //atoi() for conversion of  string to int
#include<string.h>

void print_file_names(char dir_name[100],long nByte);

int main(int argc, char *argv[])
{
    DIR *dir;
    struct dirent *dirent;
    struct stat st;
    long nByte;

    if(argc != 2)
    {
        printf("Invalid number of argument...!");
        return 0;
    }
    nByte = atoi(argv[1]);

    dir = opendir(".");
    while((dirent = readdir(dir)) != NULL)
    {
        if(dirent->d_type == DT_DIR) // folder or directory
        {  
            print_file_names(dirent->d_name,nByte);
        }else
        {
            stat(dirent->d_name,&st);
            if(st.st_size > nByte)
            {
                printf("Directory Name = Current  --  File Name = %s  --  Size = %ld\n",dirent->d_name,st.st_size);
            } 
        }
    }
    closedir(dir);
}

void print_file_names(char dir_name[100],long nByte)
{
    DIR *dir;
    struct dirent *dirent;
    struct stat st;
    int size;
    char path[100];
    
    if(strcmp(dir_name,".") == 0 || strcmp(dir_name,"..") == 0 || dir_name[0] == '.')
    {
        return;
    }

    dir = opendir(dir_name);
    while((dirent = readdir(dir)) != NULL)
    {
        if(dirent->d_type == DT_REG) //regular file
        {
            path[0] = '\0';
            strcat(path,dir_name);
            strcat(path,"/");

            strcat(path,dirent->d_name);
            stat(path,&st);

            size = st.st_size;
            if(size > nByte)
            {
                printf("Directory Name = %s  --  File Name = %s  --  Size = %d\n",dir_name,dirent->d_name,size);
            }
        }else
        {
            if(strcmp(dirent->d_name,".") == 0 || strcmp(dirent->d_name,"..") == 0 || dirent->d_name[0] == '.')
            {
                continue;
            }
            path[0] = '\0';
            strcat(path,dir_name);
            strcat(path,"/");
            strcat(path,dirent->d_name);

            print_file_names(path,nByte);
        }
    }
    closedir(dir);
}


OUTPUT

(base) amol@amol-Ideapad-320:~/AOS$ gcc q5.c
(base) amol@amol-Ideapad-320:~/AOS$ ./a.out 100
Directory Name = Current  --  File Name = q2.c  --  Size = 892
Directory Name = Current  --  File Name = a.out  --  Size = 17152
Directory Name = Current  --  File Name = q7.c  --  Size = 848
Directory Name = Current  --  File Name = q5.c  --  Size = 2107
Directory Name = kdir  --  File Name = kd.txt  --  Size = 8183
Directory Name = kdir/kkdir  --  File Name = k.txt  --  Size = 10358

---------------------------------------------------------------------

Q6 

#include<stdio.h>
#include<unistd.h>
#include<stdlib.h>
#include<signal.h>
void signint(int sig);
void sighup(int sig);
void sigquit(int sig);

int gotsig;

int main()
{
    int pid,i;
    pid = fork();
    if(pid < 0)
    {
        perror("fork");
        exit(0);
    }

    if(pid == 0)
    {
        signal(SIGHUP,sighup);
        signal(SIGINT,signint);
        signal(SIGQUIT,sigquit);

        pause();
        while(1)
        {
            if(gotsig == SIGINT)
            {
                printf("Child : Child process recieved SIGINT signal\n");
                gotsig = -1;
            }else if(gotsig == SIGHUP)
            {
                printf("Child : Child process recieved SIGHUP signal\n"); 
                gotsig = -1;
            }else if(gotsig == SIGQUIT)
            {
                printf("Dady killed me....!\n");
                exit(0);
            }
        }
    }else
    {
        sleep(1);
        for(i = 1; i <=5 ; i++)
        {
            if(i % 2 == 0)
            {
                printf("Parent : sending SIGINT signal\n");
                kill(pid,SIGINT);
                sleep(3);
            }else
            {
                printf("Parent : sending SIGHUP signal\n");
                kill(pid,SIGHUP);
                sleep(3);
            }
        }
        printf("Parent : sending SIGQUIT signal\n");
        kill(pid,SIGQUIT);
    }
}

void signint(int sig)
{
    gotsig = sig;
}

void sighup(int sig)
{
    gotsig = sig;
}

void sigquit(int sig)
{
    gotsig = sig;
}


output

(base) amol@amol-Ideapad-320:~/AOS$ gcc q6.c
(base) amol@amol-Ideapad-320:~/AOS$ ./a.out
PARENT: sending SIGINT signal : 1
Child: I have received sighINT
PARENT: sending SIGHUP Signal : 2
Child: I have received sighup
PARENT: sending SIGINT signal : 3
Child: I have received sighINT
PARENT: sending SIGHUP Signal : 4
Child: I have received sighup
PARENT: sending SIGINT signal : 5
Child: I have received sighINT
Parent sending SIGQUIT
My daddy has killed me

-------------------------------------------------------------

Q7

#include<stdio.h>
#include<unistd.h>
#include<dirent.h>
#include<string.h>
#include<fcntl.h> // O_RDWR  ,  O_CREAT
#include<sys/stat.h>
#include<stdlib.h>
#include<time.h>

int main(int argc,char *argv[])
{
    DIR *dir;
    int fd;
    struct dirent *dirent;
    struct stat st;
    char size[100];
    char time[100];

    if(argc != 2)
    {
        printf("Invalid number of argument..!\n");
        return 0;
    }

    if((fd = open(argv[1],O_RDWR|O_CREAT,0642)) < 0)
    {
        printf("Opening file failed...!");
    }else
    {
        printf("Opening file sucessfully..!\n\n");
    }

    dir = opendir(".");
    while((dirent = readdir(dir)) != NULL)
    {
        stat(dirent->d_name,&st);
        sprintf(size,"%d",(int)st.st_size); // Integerr to string conversion

                
        
        write(fd,size,strlen(size));
        write(fd,"  ",2);
        write(fd,dirent->d_name,strlen(dirent->d_name));
        write(fd,"  ",2);
        write(fd,ctime(&st.st_ctime),strlen(ctime(&st.st_ctime)));

    }
    close(fd);
    closedir(dir);
}

OUTPUT
(base) amol@amol-Ideapad-320:~/AOS$ ./a.out output.txt
Opening file sucessfully..!

Output.txt
892  q2.c  Sun May 29 13:17:02 2022
17264  a.out  Sun May 29 13:38:08 2022
4096  .vscode  Sat May 28 14:36:30 2022
4096  adir  Sat May 28 16:19:05 2022
152  output.txt  Sun May 29 13:38:10 2022
848  q7.c  Sun May 29 12:09:56 2022

---------------------------------------------------------------
Q8

#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<sys/stat.h>
#include<string.h>
#include<dirent.h>
#include<time.h>

int main(int argc, char *argv[])
{
    DIR *dir;
    struct dirent *dirent;
    struct stat st;
    char date_time[100];
    char *month;
    

    if(argc != 2)
    {
        printf("Invalid number of arguments...!\n");
        exit(1);
    }

    dir = opendir(".");
    while((dirent = readdir(dir)) != NULL)
    {
        if(stat(dirent->d_name,&st) == -1)
        {
            perror("stat");
            exit(1);
        }

        strcpy(date_time,ctime(&st.st_ctime));

        strtok(date_time," ");
        month = strtok(NULL," ");
        if(strcmp(month,argv[1]) == 0)
        {
            printf("%s -- %s \n",dirent->d_name,ctime(&st.st_ctime));
        }
    }
}

OUTPUT

q2.c -- Sun May 29 13:17:02 2022
 
a.out -- Sun May 29 13:31:29 2022
 
.vscode -- Sat May 28 14:36:30 2022
 
adir -- Sat May 28 16:19:05 2022
 
q7.c -- Sun May 29 12:09:56 2022




